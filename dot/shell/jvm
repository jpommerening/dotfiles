#!/bin/bash

JAVA_HOME_BIN="/usr/libexec/java_home"

if test -x "$JAVA_HOME_BIN" ; then

  jvm () {
    local cmd="$1"
    shift 1

    case "$cmd" in
      use|exec|run|i|install|uninstall)
        local v="$1"
        shift 1
        ;;
    esac

    case "$cmd" in
      exec)
        "$JAVA_HOME_BIN" -v "$v" --exec "$@"
        return "$?"
        ;;
      run)
        "$JAVA_HOME_BIN" -v "$v" --exec "java" "$@"
        return "$?"
        ;;

      use)
        jvm_use_version "$v" "$@"
        ;;
      i|install)
        jvm_install_version "$v" "$@"
        ;;
      uninstall)
        jvm_uninstall_version "$v" "$@"
        ;;
      l|list)
        "$JAVA_HOME_BIN" -V
        ;;

      *) cat <<EOF
Java version manager

Usage:
  jvm install <version> [-q]         Download and install <version>, [-q] quietly / without GUI,
                                     will ask for your password for write access to System folders
  jvm uninstall <version>            Uninstall <version>
  jvm use <version>                  Modify JAVA_HOME to use <version>
  jvm list                           Show available versions
  jvm exec <version> <command>       Run the Java <command> (java, javac, etc.) with the JDK <version>
  jvm run <version> <args>           Run java with the given <args>, equivalent to 'jvm exec <version> java <args>'

EOF
        ;;
    esac
  }

  jvm_use_version () {
    local version="$1"
    JAVA_HOME=`"$JAVA_HOME_BIN" -v "$version"`
    test "$?" -eq 0 || return 1
    echo "Now using Java $v ($JAVA_HOME)"
    export JAVA_HOME
  }

  jvm_install_version () {
    local version=""
    local hash=""
    local file=""

    if test "x$2" = "x-q" ; then
      local quiet="true"
    fi

    read version hash file < <(jvm_resolve_version "$1")

  ( set -e
    local url="http://download.oracle.com/otn-pub/java/jdk/$version/$hash/$file"
    local dmg="${TMPDIR:-/tmp}/$file"
    local dir="${TMPDIR:-/tmp}/jvm-$version"

    test -f "$dmg" || jvm_download_url "$url" "$dmg"
    test -d "$dir" || hdiutil attach -quiet -mountpoint "$dir" "$dmg"

    local pkg=`ls -1 "$dir" | grep "\.pkg$" | head -1`


    if test "x$quiet" = "xtrue" ; then
      sudo installer -target / -pkg "$dir/$pkg"
    else
      echo -n "Installing ${pkg%.pkg} ... "
      open -W "$dir/$pkg"
      echo "done"
    fi

    hdiutil detach -quiet "$dir" )

    jvm_use_version "$1"
  }

  jvm_uninstall_version () {
    local version="$1"
    local java_home=""

    java_home=`"$JAVA_HOME_BIN" -v "$version"`
    test "$?" -eq 0 || return 1


  ( set -e
    local line=""
    local pkg=""
    local volume=""
    local location=""

    pkgutil --pkgs='com\.oracle\.jdk.*' | while read pkg ; do
      while read line ; do
        case "$line" in
          package-id:*)
            pkg="${line#*: }"
            ;;
          volume:*)
            volume="${line#*: }"
            ;;
          location:*)
            location="${line#*: }"
            ;;
        esac
      done < <(pkgutil --pkg-info "$pkg")

      path="$volume$location"

      if ! test -d "$path" -a "${java_home#$path}" = "$java_home" ; then
        sudo echo "Uninstalling package $pkg ($path)"
        pushd "$path" >/dev/null
        pkgutil --only-files --files "$pkg" | tr '\n' '\0' | xargs -n 1 -0 sudo rm -f
        sudo rm -f Contents/MacOS/lib*.dylib
        pkgutil --only-dirs --files "$pkg" | tail -r | tr '\n' '\0' | xargs -n 1 -0 sudo rmdir
        popd >/dev/null
        sudo rmdir "$path"
        sudo pkgutil --forget "$pkg"
      fi
    done )
  }

  jvm_resolve_version () {
    ( grep "^$1\(\.[0-9]\| \)" | head -1 | cut -d" " -f2- ) <<EOT
10 10+46 76eac37278c24557a3c4199677f19b62 jdk-10_osx-x64_bin.dmg
9.0.4 9.0.4+11 c2514751926b4512b076cc82f959763f jdk-9.0.4_osx-x64_bin.dmg
1.8.0_162 8u162-b12 0da788060d494f5095bf8624735fa2f1 jdk-8u162-macosx-x64.dmg
1.8.0_161 8u161-b12 2f38c3b165be4555a1fa6e98c45e0808 jdk-8u161-macosx-x64.dmg
EOT
  }

  jvm_download_url () {
    local url="$1"
    local file="$2"

    echo "Downloading $url ..."

    curl -#L \
      -H "Cookie: oraclelicense=accept-securebackup-cookie" \
      -o "$file" "$url"
  }
fi
